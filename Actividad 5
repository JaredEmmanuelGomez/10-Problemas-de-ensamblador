Actividad 5. Capitulo 1. PROBLEMAS INTRODUCTORIOS
Ejercicio 7: Determinar si un número dado es divisible entre 14.

PSEUDOCÓDIGO
INICIO
    // Solicitar al usuario que ingrese un número
    ESCRIBIR "Ingrese un número: "
    LEER numero

    // Verificar si el número es divisible entre 14
    SI numero MOD 14 == 0 ENTONCES
        ESCRIBIR "El número es divisible entre 14."
    SINO
        ESCRIBIR "El número no es divisible entre 14."
    FIN SI
FIN

C# Y ARM64
/*
using System;
class Program
{
    static void Main()
    {
        // Solicitar al usuario que ingrese un número
        Console.Write("Ingrese un número: ");
        int numero = Convert.ToInt32(Console.ReadLine());

        // Verificar si el número es divisible entre 14
        if (numero % 14 == 0)
        {
            Console.WriteLine("El número es divisible entre 14.");
        }
        else
        {
            Console.WriteLine("El número no es divisible entre 14.");
        }
    }
}
*/

//ARM64
//Determinar si un número dado es divisible entre 14.

.data
prompt:     .asciz "Ingrese un numero: "
divisible:  .asciz "El numero es divisible entre 14.\n"
no_divisible: .asciz "El numero no es divisible entre 14.\n"
format:     .asciz "%d"

.text
.global main
.extern printf
.extern scanf

main:
    // Guardar el enlace de retorno y ajustar el stack pointer
    stp x29, x30, [sp, #-16]!
    mov x29, sp

    // Imprimir el prompt
    adrp x0, prompt
    add x0, x0, :lo12:prompt
    bl printf

    // Leer el número ingresado
    sub sp, sp, #16
    mov x2, sp
    adrp x0, format
    add x0, x0, :lo12:format
    mov x1, x2
    bl scanf

    // Cargar el número ingresado
    ldr w0, [sp]

    // Dividir por 14
    mov w1, #14
    udiv w2, w0, w1
    msub w3, w2, w1, w0

    // Comparar el residuo con 0
    cmp w3, #0
    bne not_divisible

    // Es divisible
    adrp x0, divisible
    add x0, x0, :lo12:divisible
    bl printf
    b end

not_divisible:
    // No es divisible
    adrp x0, no_divisible
    add x0, x0, :lo12:no_divisible
    bl printf

end:
    // Restaurar el enlace de retorno y salir
    ldp x29, x30, [sp], #16
    mov w0, #0
    ret

ASCIINEMA
https://asciinema.org/a/680138
